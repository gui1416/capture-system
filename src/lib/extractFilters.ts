// src/utils/extractFilters.ts
import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';

// Garante que a chave seja verificada corretamente no n√≠vel do m√≥dulo
if (!process.env.GOOGLE_API_KEY) {
  console.error("‚ùå FATAL: GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente.");
  // Lan√ßar erro aqui pode parar a inicializa√ß√£o do servidor, o que pode ser desejado
  throw new Error('GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// Exporta a interface para ser usada em outros lugares
export interface ExtractedFilters {
  palavrasChave: string[];
  sinonimos?: string[][]; // Mant√©m opcional
  valorMin: number | null;
  valorMax: number | null;
  estado?: string | null; // Mant√©m opcional
}

export async function extractFilters(question: string): Promise<ExtractedFilters> {
  if (!question || typeof question !== 'string' || !question.trim()) {
    console.warn("‚ö†Ô∏è extractFilters chamada com pergunta inv√°lida.");
    // Retorna uma estrutura padr√£o
    return {
      palavrasChave: [],
      valorMin: null,
      valorMax: null,
      estado: null,
      sinonimos: []
    };
  }
  console.log(`üß† Chamando Gemini para extrair filtros de: "${question}"`);

  // Prompt refinado para melhor ader√™ncia √† estrutura JSON
  const prompt = `
     Analise a seguinte pergunta sobre licita√ß√µes p√∫blicas no Brasil e extraia as informa√ß√µes solicitadas.
     Pergunta: "${question}"

     Responda **apenas** com um objeto JSON v√°lido contendo os seguintes campos:
     - "palavrasChave": array de strings com os termos mais importantes para busca (ex: ["manuten√ß√£o", "ve√≠culos", "frota"]). Mantenha termos compostos juntos se relevante (ex: ["ar condicionado"]). Se nenhuma palavra-chave for identificada, retorne um array vazio [].
     - "sinonimos": array de arrays de strings. Cada array interno deve conter sin√¥nimos para a palavra-chave correspondente no array "palavrasChave". Se n√£o houver sin√¥nimos ou n√£o for aplic√°vel, retorne um array vazio [] para essa palavra-chave. A estrutura deve ser, por exemplo: [["conserto", "reparo"], ["autom√≥veis"], []]. Se nenhuma palavra-chave for identificada, retorne um array vazio [].
     - "valorMin": n√∫mero representando o valor m√≠nimo mencionado (ex: 500000). Se nenhum valor m√≠nimo for explicitamente mencionado, retorne null. Extraia apenas n√∫meros.
     - "valorMax": n√∫mero representando o valor m√°ximo mencionado (ex: 1000000). Se nenhum valor m√°ximo for explicitamente mencionado, retorne null. Extraia apenas n√∫meros.
     - "estado": string contendo a sigla de duas letras do estado brasileiro mencionado (ex: "SP", "RJ", "MG"). Se nenhum estado for mencionado ou n√£o for poss√≠vel identificar claramente, retorne null.
     

     Exemplo de JSON esperado:
     {
       "palavrasChave": ["trator agr√≠cola", "pneus"],
       "sinonimos": [["m√°quina agr√≠cola"], ["rodas", "borrachas"]],
       "valorMin": null,
       "valorMax": 380000,
       "estado": "SP"
     }

     **Importante:** Retorne apenas o objeto JSON, sem nenhum texto adicional antes ou depois, e sem usar markdown (como \`\`\`json).
   `;

  try {
    // Usa o modelo gemini-1.5-flash ou outro configurado
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" }); // Ajuste se necess√°rio
    console.log(`‚ÑπÔ∏è Usando modelo Gemini: ${model.model}`);

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    if (!text) {
      console.error('‚ùå Falha ao extrair filtros: resposta da IA vazia.');
      throw new Error('Falha ao extrair filtros da pergunta: resposta vazia da IA');
    }

    // --- L√≥gica Melhorada de Extra√ß√£o de JSON ---
    let jsonText = text.trim();
    const regexMatch = jsonText.match(/```json\s*([\s\S]*?)\s*```/);
    if (regexMatch && regexMatch[1]) {
      jsonText = regexMatch[1].trim();
      console.log("‚ÑπÔ∏è JSON extra√≠do de dentro dos delimitadores ```json.");
    } else {
      jsonText = jsonText.replace(/^```\s*|\s*```$/g, '').trim();
      if (!jsonText.startsWith('{') || !jsonText.endsWith('}')) {
        const firstBrace = jsonText.indexOf('{');
        const lastBrace = jsonText.lastIndexOf('}');
        if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
          console.warn("‚ö†Ô∏è Tentando extrair JSON entre o primeiro '{' e o √∫ltimo '}'. Resposta original pode conter texto extra.");
          jsonText = jsonText.substring(firstBrace, lastBrace + 1);
        } else {
          console.error('‚ùå Resposta da IA n√£o parece conter um objeto JSON v√°lido ap√≥s tentativas de limpeza:', jsonText);
          throw new Error('Resposta da IA n√£o parece conter um objeto JSON v√°lido.');
        }
      }
    }
    // --- Fim da L√≥gica Melhorada de Extra√ß√£o de JSON ---

    try {
      const parsedResponse = JSON.parse(jsonText) as Partial<ExtractedFilters>; // Usa Partial para valida√ß√£o

      // --- Valida√ß√£o e Normaliza√ß√£o ---
      const validatedResponse: ExtractedFilters = {
        palavrasChave: [],
        sinonimos: [],
        valorMin: null,
        valorMax: null,
        estado: null,
      };

      if (Array.isArray(parsedResponse.palavrasChave)) {
        validatedResponse.palavrasChave = parsedResponse.palavrasChave.filter(kw => typeof kw === 'string');
      } else {
        console.warn('‚ö†Ô∏è IA retornou palavrasChave inv√°lido, usando default [].', parsedResponse.palavrasChave);
      }

      if (parsedResponse.sinonimos !== undefined) {
        if (Array.isArray(parsedResponse.sinonimos)) {
          validatedResponse.sinonimos = parsedResponse.sinonimos.map(synList =>
            Array.isArray(synList) ? synList.filter(s => typeof s === 'string') : []
          );
        } else {
          console.warn('‚ö†Ô∏è IA retornou sinonimos inv√°lido, ignorando.', parsedResponse.sinonimos);
        }
      }

      if (parsedResponse.valorMin !== null && typeof parsedResponse.valorMin === 'number') {
        validatedResponse.valorMin = parsedResponse.valorMin;
      } else if (parsedResponse.valorMin !== null) {
        console.warn('‚ö†Ô∏è IA retornou valorMin inv√°lido, usando null.', parsedResponse.valorMin);
      }

      if (parsedResponse.valorMax !== null && typeof parsedResponse.valorMax === 'number') {
        validatedResponse.valorMax = parsedResponse.valorMax;
      } else if (parsedResponse.valorMax !== null) {
        console.warn('‚ö†Ô∏è IA retornou valorMax inv√°lido, usando null.', parsedResponse.valorMax);
      }

      // Verifica intervalo min/max
      if (validatedResponse.valorMin !== null && validatedResponse.valorMax !== null && validatedResponse.valorMin > validatedResponse.valorMax) {
        console.warn('‚ö†Ô∏è IA retornou valorMin > valorMax, invalidando faixa.', parsedResponse);
        validatedResponse.valorMin = null;
        validatedResponse.valorMax = null;
      }

      if (parsedResponse.estado !== null && typeof parsedResponse.estado === 'string') {
        const estadoUpper = parsedResponse.estado.toUpperCase().trim();
        if (estadoUpper.length === 2) { // Verifica√ß√£o b√°sica de formato
          validatedResponse.estado = estadoUpper;
        } else {
          console.warn('‚ö†Ô∏è IA retornou estado com formato inv√°lido, usando null.', parsedResponse.estado);
        }
      } else if (parsedResponse.estado !== null) {
        console.warn('‚ö†Ô∏è IA retornou estado inv√°lido, usando null.', parsedResponse.estado);
      }
      // --- Fim da Valida√ß√£o ---

      console.log("‚úÖ Filtros extra√≠dos e validados:", validatedResponse);
      return validatedResponse;

    } catch (parseError: any) {
      console.error('‚ùå Erro ao analisar JSON da resposta da IA:', parseError.message);
      console.error('üìÑ Texto que falhou no parse JSON:', jsonText);
      console.error('üìÑ Resposta bruta original da IA:', text);
      throw new Error(`Falha ao analisar resposta da IA: ${parseError.message}.`);
    }
  } catch (error: any) {
    if (error instanceof GoogleGenerativeAIError) {
      console.error('‚ùå Erro na API Gemini:', error);
      throw new Error(`Falha na comunica√ß√£o com a IA Gemini: ${error.message}`);
    } else {
      console.error('‚ùå Erro inesperado em extractFilters:', error);
      throw error;
    }
  }
}
