// src/utils/extractFilters.ts
import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';
import { subDays, format } from 'date-fns';

// Garante que a chave seja verificada corretamente no n√≠vel do m√≥dulo
if (!process.env.GOOGLE_API_KEY) {
  console.error("‚ùå FATAL: GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente.");
  throw new Error('GOOGLE_API_KEY n√£o est√° definida nas vari√°veis de ambiente');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// Interface atualizada para incluir datas
export interface ExtractedFilters {
  palavrasChave: string[];
  sinonimos: string[][];
  valorMin: number | null;
  valorMax: number | null;
  estado: string | null;
  modalidade: string | null;
  dataInicial: string | null; // Formato YYYY-MM-DD
  dataFinal: string | null;   // Formato YYYY-MM-DD
}

/**
 * Extrai filtros estruturados de uma pergunta em linguagem natural usando a API Gemini.
 * @param question A pergunta do usu√°rio sobre licita√ß√µes.
 * @returns Uma promessa que resolve para um objeto ExtractedFilters.
 */
export async function extractFilters(question: string): Promise<ExtractedFilters> {
  const defaultResponse: ExtractedFilters = {
    palavrasChave: [],
    sinonimos: [],
    valorMin: null,
    valorMax: null,
    estado: null,
    modalidade: null,
    dataInicial: null,
    dataFinal: null,
  };

  if (!question || typeof question !== 'string' || !question.trim()) {
    console.warn("‚ö†Ô∏è extractFilters chamada com pergunta inv√°lida.");
    return defaultResponse;
  }
  console.log(`üß† Chamando Gemini para extrair filtros de: "${question}"`);

  const hoje = new Date();
  const dataAtualFormatada = format(hoje, 'yyyy-MM-dd');

  // --- PROMPT OTIMIZADO ---
  // 1. Adicionada regra expl√≠cita para "√∫ltimos X dias".
  const prompt = `
Voc√™ √© um Assistente de IA Especialista em Capta√ß√£o de Editais, treinado exclusivamente para atender √†s necessidades da empresa **Solu√ß√µes Servi√ßos Terceirizados Ltda**. Sua fun√ß√£o √© analisar perguntas sobre licita√ß√µes e editais p√∫blicos no Brasil, com foco absoluto nos ramos de atua√ß√£o da empresa.

Sua tarefa √© interpretar a pergunta do usu√°rio, mape√°-la para um ou mais ramos de especializa√ß√£o da empresa e retornar **apenas um objeto JSON v√°lido**, sem nenhum texto, explica√ß√£o ou markdown (como \`\`\`json) ao redor dele.

A data de hoje √©: ${dataAtualFormatada}.

---

### **Contexto e Ramos de Atua√ß√£o da Empresa (Sua Base de Conhecimento)**

Voc√™ deve obrigatoriamente usar esta lista como sua principal fonte de conhecimento para identificar as oportunidades corretas.

1.  **Alimenta√ß√£o Prisional:**
    * **Termos-chave**: "alimenta√ß√£o prisional", "refei√ß√µes para pres√≠dios", "fornecimento de alimenta√ß√£o para unidades prisionais", "nutri√ß√£o prisional".
    * **Sin√¥nimos e correlatos**: "alimenta√ß√£o para detentos", "gest√£o de refeit√≥rio prisional", "kit lanche para sistema prisional", "refei√ß√µes transportadas para pres√≠dios".

2.  **Alimenta√ß√£o Hospitalar:**
    * **Termos-chave**: "alimenta√ß√£o hospitalar", "refei√ß√µes para hospitais", "servi√ßos de nutri√ß√£o hospitalar", "dieta hospitalar".
    * **Sin√¥nimos e correlatos**: "gest√£o de refeit√≥rio hospitalar", "nutri√ß√£o cl√≠nica", "alimenta√ß√£o enteral", "fornecimento de dietas para pacientes".

3.  **Merenda ou Alimenta√ß√£o Escolar:**
    * **Termos-chave**: "merenda escolar", "alimenta√ß√£o escolar", "refei√ß√µes para escolas", "PNAE", "programa nacional de alimenta√ß√£o escolar".
    * **Sin√¥nimos e correlatos**: "fornecimento de merenda", "gest√£o de cantina escolar", "refeit√≥rio escolar", "kit merenda".

4.  **Frota com Motorista:**
    * **Termos-chave**: "loca√ß√£o de frota com motorista", "aluguel de ve√≠culos com condutor", "transporte executivo", "terceiriza√ß√£o de frota".
    * **Sin√¥nimos e correlatos**: "servi√ßos de motorista", "transporte de passageiros", "ve√≠culos com motorista √† disposi√ß√£o", "fretamento de ve√≠culos".

5.  **Cogest√£o Prisional:**
    * **Termos-chave**: "cogest√£o prisional", "gest√£o compartilhada de unidade prisional", "administra√ß√£o prisional".
    * **Sin√¥nimos e correlatos**: "parceria na gest√£o de pres√≠dios", "gest√£o de estabelecimentos penais", "apoio √† gest√£o prisional".

6.  **Fornecimento de M√£o de Obra (Facilities):**
    * **Termos-chave**: "fornecimento de m√£o de obra", "terceiriza√ß√£o de servi√ßos", "m√£o de obra dedicada", "aloca√ß√£o de postos de trabalho".
    * **Sin√¥nimos e correlatos**: "facilities", "servi√ßos de apoio administrativo", "recepcionista", "porteiro", "copeiragem", "servi√ßos gerais".

7.  **Limpeza Predial, Escolar e Hospitalar (Agrupado por expertise):**
    * **Limpeza Predial**: "limpeza predial", "conserva√ß√£o e limpeza", "higieniza√ß√£o de edif√≠cios". **Correlatos**: "limpeza de fachadas", "tratamento de piso".
    * **Limpeza Escolar**: "limpeza escolar", "higieniza√ß√£o de escolas", "conserva√ß√£o de ambiente escolar". **Correlatos**: "limpeza de p√°tios", "higieniza√ß√£o de salas de aula".
    * **Limpeza Hospitalar**: "limpeza hospitalar", "higieniza√ß√£o hospitalar", "limpeza e desinfec√ß√£o hospitalar". **Correlatos**: "limpeza terminal", "limpeza concorrente", "assepsia de ambientes", "gest√£o de res√≠duos de sa√∫de".

8.  **PPP (Parceria P√∫blico-Privada) e PPI (Programa de Parcerias de Investimentos):**
    * **Termos-chave**: "PPP", "parceria p√∫blico-privada", "concess√£o administrativa", "concess√£o patrocinada", "PPI", "programa de parcerias de investimentos".
    * **Sin√¥nimos e correlatos**: "edital de manifesta√ß√£o de interesse", "PMI", "procedimento de manifesta√ß√£o de interesse".

9.  **Engenharia (Constru√ß√£o, Reforma e Manuten√ß√£o):**
    * **Constru√ß√£o**: "constru√ß√£o civil", "obras de edifica√ß√£o", "execu√ß√£o de obra".
    * **Reforma**: "reforma predial", "reforma de edif√≠cios", "servi√ßos de reforma".
    * **Manuten√ß√£o**: "manuten√ß√£o predial", "manuten√ß√£o preventiva", "manuten√ß√£o corretiva", "gest√£o de manuten√ß√£o".
    * **Sin√¥nimos e correlatos gerais**: "obras de engenharia", "servi√ßos de engenharia", "edifica√ß√µes", "infraestrutura predial".

---

### **Instru√ß√µes para Extra√ß√£o:**

1.  **An√°lise da Pergunta**: Leia a pergunta do usu√°rio: \`"${question}"\`
2.  **Mapeamento**: Identifique o(s) ramo(s) de atua√ß√£o principal(is) da empresa mencionado(s) na pergunta. Se o usu√°rio usar um termo como "higieniza√ß√£o de hospital", voc√™ deve mape√°-lo para "Limpeza Hospitalar". Se pedir "transporte com condutor", mapeie para "Frota com Motorista".
3.  **Extra√ß√£o de Palavras-chave**: Popule o campo \`palavrasChave\` com os termos mais diretos da pergunta e os "Termos-chave" do ramo correspondente.
4.  **Enriquecimento com Sin√¥nimos**: Popule o campo \`sinonimos\` com os "Sin√¥nimos e correlatos" do ramo identificado. Isso garantir√° uma busca mais ampla e eficaz. Se m√∫ltiplos ramos forem identificados, combine seus sin√¥nimos.
5.  **Extra√ß√£o de Par√¢metros**: Extraia os demais par√¢metros (valor, estado, modalidade, datas) conforme as regras.

---

### **Estrutura do JSON de Sa√≠da (Obrigat√≥ria)**

O objeto JSON de sa√≠da deve ter a seguinte estrutura:
{
  "palavrasChave": ["array", "de", "strings"],
  "sinonimos": [["sinonimos_palavra1"], ["para_palavra2"]],
  "valorMin": null | numero,
  "valorMax": null | numero,
  "estado": null | "string",
  "modalidade": null | "string",
  "dataInicial": null | "string" (formato AAAA-MM-DD),
  "dataFinal": null | "string" (formato AAAA-MM-DD)
}

---

### **Regras para Extra√ß√£o de Data:**

- Extraia um intervalo de datas mencionado. Use sempre o formato **AAAA-MM-DD**.
- Se for dito "hoje", use "${dataAtualFormatada}" para dataInicial e dataFinal.
- Se for dito "ontem", calcule a data correspondente.
- **Se for dito "nos √∫ltimos X dias", calcule a data inicial subtraindo X dias da data de hoje (${dataAtualFormatada}). A data final ser√° a data de hoje.**
- Se apenas uma data for mencionada (ex: "no dia 15/05/2025"), use-a para dataInicial e dataFinal.
- Se for "de 02/06/2025 at√© 06/06/2025", dataInicial ser√° "2025-06-02" e dataFinal ser√° "2025-06-06".
- Se nenhum per√≠odo for mencionado, retorne null para ambos.

---

### **Exemplo de Aplica√ß√£o (Cen√°rio: hoje √© 2025-06-10)**

**Pergunta do usu√°rio**: "licita√ß√µes de higieniza√ß√£o hospitalar e tamb√©m de merenda para escolas no estado de SP dos √∫ltimos 7 dias, acima de 1 milh√£o"

**Seu Racioc√≠nio Interno Esperado**:
1.  **Ramo 1**: "higieniza√ß√£o hospitalar" -> Mapeia para "Limpeza Hospitalar".
2.  **Ramo 2**: "merenda para escolas" -> Mapeia para "Merenda ou Alimenta√ß√£o Escolar".
3.  **Palavras-chave**: Combina os termos principais: ["limpeza hospitalar", "higieniza√ß√£o hospitalar", "merenda escolar", "alimenta√ß√£o escolar"].
4.  **Sin√¥nimos**: Combina os sin√¥nimos dos dois ramos: [["limpeza terminal", "desinfec√ß√£o hospitalar", "assepsia"], ["fornecimento de merenda", "PNAE", "refeit√≥rio escolar"]].
5.  **Par√¢metros**: estado="SP", valorMin=1000000, dataInicial="2025-06-03", dataFinal="2025-06-10".

**JSON de Sa√≠da Esperado**:
{
  "palavrasChave": ["limpeza hospitalar", "higieniza√ß√£o hospitalar", "merenda escolar", "alimenta√ß√£o escolar"],
  "sinonimos": [["limpeza terminal", "desinfec√ß√£o hospitalar", "assepsia de ambientes"], ["fornecimento de merenda", "PNAE", "gest√£o de cantina escolar", "kit merenda"]],
  "valorMin": 1000000,
  "valorMax": null,
  "estado": "SP",
  "modalidade": null,
  "dataInicial": "2025-06-03",
  "dataFinal": "2025-06-10"
}
`;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    if (!text) throw new Error('Falha ao extrair filtros: resposta da IA vazia');

    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) throw new Error('Resposta da IA n√£o parece conter um objeto JSON v√°lido.');

    const jsonText = jsonMatch[0];
    const parsedResponse = JSON.parse(jsonText) as Partial<ExtractedFilters>;
    const validatedResponse: ExtractedFilters = { ...defaultResponse };

    if (Array.isArray(parsedResponse.palavrasChave)) validatedResponse.palavrasChave = parsedResponse.palavrasChave.filter(kw => typeof kw === 'string');
    if (Array.isArray(parsedResponse.sinonimos)) validatedResponse.sinonimos = parsedResponse.sinonimos.map(s => Array.isArray(s) ? s.filter(i => typeof i === 'string') : []);
    if (typeof parsedResponse.valorMin === 'number') validatedResponse.valorMin = parsedResponse.valorMin;
    if (typeof parsedResponse.valorMax === 'number') validatedResponse.valorMax = parsedResponse.valorMax;
    if (typeof parsedResponse.estado === 'string') validatedResponse.estado = parsedResponse.estado.toUpperCase().trim();
    if (typeof parsedResponse.modalidade === 'string') validatedResponse.modalidade = parsedResponse.modalidade.trim();
    if (typeof parsedResponse.dataInicial === 'string') validatedResponse.dataInicial = parsedResponse.dataInicial;
    if (typeof parsedResponse.dataFinal === 'string') validatedResponse.dataFinal = parsedResponse.dataFinal;

    console.log("‚úÖ Filtros extra√≠dos e validados:", validatedResponse);
    return validatedResponse;

  } catch (error: any) {
    console.error('‚ùå Erro em extractFilters:', error);
    if (error instanceof GoogleGenerativeAIError) {
      throw new Error(`Falha na comunica√ß√£o com a IA Gemini: ${error.message}`);
    }
    throw error;
  }
}
